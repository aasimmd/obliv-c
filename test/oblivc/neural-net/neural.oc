#include<obliv.oh>
#include "neural.h"

void toObliv3D(protocolIO *io, int party, obliv float ***dest, float ***src, int n, int **shapes)
{
  // printf("%f ",src[0][4][0]);
  for(int x=0; x<n; x++)
  {
    // printf("Operating on %d %d\n", shapes[x][0], shapes[x][1]);
    for(int y=0; y<shapes[x][0]; y++)
    {
      for(int z=0; z<shapes[x][1]; z++)
      {
        dest[x][y][z] = feedOblivFloat(src[x][y][z], party);
        // printf("Okay for %d %d %d\n", x, y, z);
      }
    }
  }
}

void toObliv2D(protocolIO *io, int party, obliv float **dest, float **src, int m, int n)
{
  for(int x=0; x<m; x++)
  {
    for(int y=0; y<n; y++)
    {
      dest[x][y] = feedOblivFloat(src[x][y], party);
    }
  }
}

void toObliv1D(protocolIO *io, int party, obliv float *dest, float *src, int n)
{
  for(int x=0; x<n; x++)
  {
    dest[x] = feedOblivFloat(src[x], party);
  }
}

// activation functions
void relu(obliv float input, obliv float *output)
{
  obliv if(input > 0) {
    *output = input;
  }
  else {
    *output = 0;
  }
}

void matmul(obliv float **mat1, obliv float **mat2, obliv float ***op, int m1, int n1, int m2, int n2)
{
	// Multiply the matrices and store it in output
	// Output is uninitialzed, allocate memory accordingly
	
	// Create a temporary array so that the call can be used as matmul(x, op, op);
	*op = malloc((sizeof **op) * m1);
	for(int x=0; x<m1; x++)
		(*op)[x] = calloc(n2, sizeof *((*op)[x]));

	obliv float tmpsum;
	for(int x=0; x<m1; x++)
	{
		for(int y=0; y<n2; y++)
		{
			tmpsum = 0;
			for(int z=0; z<n1; z++)
				tmpsum += mat1[x][z]*mat2[z][y];
			(*op)[x][y] = tmpsum;
		}
	}
}

void add_bias(obliv float **output, obliv float *bias, int no_outputs, int len)
{
	for(int x=0; x<no_outputs; x++)
	{
		for(int y=0; y<len; y++)
			output[x][y] += bias[y];
	}
}

void feedforward(obliv float **inputs, obliv float ***weights, obliv float **biases, int **shapes, int no_layers, int no_inputs, int input_shape, obliv float ***outputs, int *activations)
{
	// inputs will be freed and realloced here, make sure it is a dynamic array
	int opx, opy;
	for(int l=0; l<no_layers; l++)
	{
		matmul(inputs, weights[l], outputs, no_inputs, input_shape, shapes[l][0], shapes[l][1]);
		opx = no_inputs;
		opy = shapes[l][1];
		input_shape = opy;
		add_bias(*outputs, biases[l], opx, opy);
		printf("Layer %d done\n", l+1);
		
		// Free and realloc inputs
		for(int x=0; x<no_inputs; x++)
			free(inputs[x]);
		free(inputs);
		inputs = malloc((sizeof *inputs) * opx);
		for(int x=0; x<opx; x++)
		{
			inputs[x] = malloc((sizeof *inputs[x]) * opy); 
			for(int y=0; y<opy; y++)
				inputs[x][y] = (*outputs)[x][y];
		}

    // check which activtation function
    if(activations[l] == 1)
    {
      for(int x=0; x<opx; x++)
      {
        for(int y=0; y<opy; y++)
        {
          relu((*outputs)[x][y], &((*outputs)[x][y]));
        }
      }
    }
    
		// printf("Successfully transferred %d\n", l+1);
	}
}

void neuralnet(void *args)
{
  protocolIO *io = (protocolIO *)args;

  // declare all variables openly
  // variables not owned will have garbage
  float ***weights, **biases, **inputs;

  int *activations = NULL;

  // fetch data
  if(ocCurrentParty()==1)
  {
    read_weights(weights_file, &weights, &biases, &(io->shapes), &(io->no_layers), &(io->activations));
  }
  else
  {
    read_inputs(inputs_file, &inputs, &(io->input_shape), &(io->no_inputs));
  }

  printf("Fetched values from the file\n");

  // broadcast io variables
  int **shapes;
  int input_shape, no_layers, no_inputs;
  no_layers = ocBroadcastInt(io->no_layers, 1);
  shapes = malloc(sizeof(int*) * no_layers);

  input_shape = ocBroadcastInt(io->input_shape, 2);
  no_inputs = ocBroadcastInt(io->no_inputs, 2);
  
  if(!io->activations)
    io->activations = malloc((sizeof *(io->activations)) * no_layers);
  if(!activations)
    activations = malloc((sizeof *activations) * no_layers);
  for(int x=0; x<no_layers; x++)
    activations[x] = ocBroadcastInt(io->activations[x], 1);
  
  // for(int y=0; y<no_layers; y++)
  //   printf("%d ", activations[y]);
  // putchar('\n');

  if(!io->shapes)
  {
    io->shapes = malloc((sizeof(int *)) * no_layers);
    for(int n=0; n<no_layers; n++)
      (io->shapes)[n] = malloc((sizeof(int)) * 2);
  }

  for(int x=0; x<no_layers; x++)
  {
    // printf("Allocated for %d\n", x);
    shapes[x] = malloc(sizeof(int) * 2);
    shapes[x][0] = ocBroadcastInt((io->shapes)[x][0], 1);
    shapes[x][1] = ocBroadcastInt((io->shapes)[x][1], 1);
  }
  printf("Shared crucial information\n");

  // allocate space for garbage variables
  if(ocCurrentParty() == 1)
  {
    // alloc inputs
    // float **inputs
    inputs = malloc(sizeof(float*) * no_inputs);
    for(int i=0; i<no_inputs; i++)
      inputs[i] = malloc(sizeof(float) * input_shape);
  }
  else
  {
    // alloc weights and biases
    // float ***weights, **biases
    weights = malloc(sizeof(float **) * no_layers);
    for(int n=0; n<no_layers; n++)
    {
      weights[n] = malloc(sizeof(float *) * shapes[n][0]);
      for(int z=0; z<shapes[n][0]; z++)
        weights[n][z] = malloc(sizeof(float) * shapes[n][1]);
    }
    biases = malloc(sizeof(float *) * no_layers);
    for(int n=0; n<no_layers; n++)
      biases[n] = malloc(sizeof(float) * shapes[n][1]);

    // special mention, alloc for io->shapes too
  }

  // make oblivious structures
  obliv float ***oweights = malloc((sizeof *oweights) * no_layers);
  obliv float **obiases = malloc((sizeof *obiases) * no_layers);
  obliv float **oinputs = malloc((sizeof *oinputs) * no_inputs);

  // allocate space at all levels
  for(int x=0; x<no_layers; x++)
  {
    printf("Shapes: %d %d\n", shapes[x][0], shapes[x][1]);
    obiases[x] = malloc((sizeof *(obiases[x])) * shapes[x][1]);
  }
  for(int x=0; x<no_inputs; x++)
    oinputs[x] = malloc((sizeof *(oinputs[x])) * input_shape);
  
  for(int x=0; x<no_layers; x++)
  {
    oweights[x] = malloc((sizeof *(oweights[x])) * shapes[x][0]);
    for(int y=0; y<shapes[x][0]; y++)
      oweights[x][y] = malloc((sizeof *(oweights[x][y])) * shapes[x][1]);
  }
  // oweights[0][4][0] = oweights[0][0][0];
  
  printf("Allocated space for oblivious structures\n");

  // transfer data to oblivious structures
  toObliv2D(io, 2, oinputs, inputs, no_inputs, input_shape);
  for(int x=0; x<no_layers; x++)
    toObliv1D(io, 1, obiases[x], biases[x], shapes[x][1]);
  // toObliv3D(io, 1, oweights, weights, no_layers, shapes);
  for(int x=0; x<no_layers; x++)
  {
    for(int y=0; y<shapes[x][0]; y++)
    {
      // printf("Transfer for %d & %d\n", x, y);
      toObliv1D(io, 1, oweights[x][y], weights[x][y], shapes[x][1]);
    }
  }
  printf("Fed weights into oblivion\n");

  printf("Fed oblivious structures with data\n");

  // perform feed-forward and reveal results
  obliv float **outputs;
  feedforward(oinputs, oweights, obiases, shapes, no_layers, no_inputs, input_shape, &outputs, activations);

  int out_x = no_inputs, out_y = shapes[no_layers-1][1];

  // reveal outputs into io
  io->outputs = malloc((sizeof *(io->outputs)) * out_x);
  for(int x=0; x<out_x; x++)
  {
    io->outputs[x] = malloc((sizeof *(io->outputs[x])) * out_y);
    for(int y=0; y<out_y; y++)
      revealOblivFloat(&io->outputs[x][y], outputs[x][y], 0);
  }
  
  // add details to io
  io->output_shape = out_y;
  io->no_inputs = out_x;

  // free-up memory
}