#include<obliv.oh>
#include "neural.h"

void mysticalc(void* args)
{
  protocolIO *io=args;
  obliv float v1,v2;
  
  v1 = feedOblivFloat(io->val,1);
  v2 = feedOblivFloat(io->val,2);
  // printf("Current user's value: %f\n", io->val);
  obliv float exp, result;
  exp = v1 + v2;
  sigmoid(io, exp, &result);
  revealOblivFloat(&io->compressed, result, 0);
}

void sigmoid(protocolIO *io, obliv float z, obliv float *result)
{
  // piecewise linear
  obliv float modz, tmp;
  float vals[] = {0.03125, 0.125, 0.25, 0.625, 0.84375};
  obliv if(z > 0) {
    modz = modz;
  } else {
    modz = -1 * z;
  }
  modz = modz * 1000;

  obliv if(modz >= 5000) {
    tmp = 1;
  } 
  obliv if(modz >= 2375) {
    obliv if(modz < 5000)
    {
      tmp = vals[0] * modz/1000 + vals[4];
    }
  }
  obliv if((modz >= 1000)) {
    obliv if(modz < 2375)
    {
      tmp = vals[1] * modz/1000 + vals[3];
    }
  } 
  obliv if((modz >= 0)) {
    obliv if(modz < 1000)
    {
      tmp = vals[2] * modz/1000 + vals[2];
    }
  }

  obliv if(z < 0){
    tmp = 1 - tmp;
  }

  *result = tmp;
}
