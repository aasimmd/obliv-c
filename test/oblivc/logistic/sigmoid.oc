#include<obliv.oh>
#include "neural.h"

void mysticalc(void* args)
{
  protocolIO *io=args;
  obliv float v1,v2;
  
  v1 = feedOblivFloat(io->val,1);
  v2 = feedOblivFloat(io->val,2);
  // printf("Current user's value: %f\n", io->val);
  obliv float exp, result;
  exp = v1 + v2;
  sigmoid(io, exp, &result);
  revealOblivFloat(&io->compressed, result, 0);
}

void sigmoid(protocolIO *io, obliv float z, obliv float *result)
{
  // constants required for cordic
  float inv2pws[] = {0.5, 0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.0078125,\
	       	0.00390625, 0.001953125, 0.0009765625, 0.00048828125, 0.000244140625, 0.0001220703125};
	float tanangs[] = {0.5493061, 0.2554128, 0.1256572, 0.0625816, 0.0312602, \
		0.0156263, 0.0078127, 0.0039063, 0.0019531, 0.0009766, 0.0004883, 0.0002441, 0.0001221};
	float atable[] = {0.866025404, 0.838525492, 0.831948719, 0.83032223, 0.8299167, 0.829815386, \
		0.829790061, 0.82978373, 0.829782148, 0.829781752, 0.829781653, 0.829781628, 0.829781622};
	int len = 13;
  obliv float d;
  obliv float x = 1, y = 0, x_, y_, z_;
  
  z = -z;
  
  for(int i=0; i<len; i++)
  {
    obliv if(z < 0)
      d = -1;
    else
      d = 1;

    x_ = x + y*d*inv2pws[i];
		y_ = y + x*d*inv2pws[i];
		z_ = z - d*tanangs[i];
		x = x_;
		y = y_;
		z = z_;

    // extra iterations at 3i+1 for convergence
		if(i==4 || i==13 || i==40)
		{
			obliv if(z < 0)
        d = -1;
      else
        d = 1;
			x_ = x + y*d*inv2pws[i];
			y_ = y + x*d*inv2pws[i];
			z_ = z - d*tanangs[i];
			x = x_;
			y = y_;
			z = z_;
		}
  }
  // Normalize x and y
	x = (x/atable[len-1]);
	y = (y/atable[len-1]);

  *result = 1/(1+x+y);
}
